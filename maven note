一.Maven 有三个标准的生命周期：clean(项目清理的处理)；default(或 build)(项目部署的处理)；site(项目站点文档创建的处理)
1.clean 生命周期，它包含以下阶段： 
pre-clean：执行一些需要在clean之前完成的工作
clean：移除所有上一次构建生成的文件
post-clean：执行一些需要在clean之后立刻完成的工作
2.Default (Build) 生命周期，包括下面的 23 个阶段：
validate（校验）：校验项目是否正确并且所有必要的信息可以完成项目的构建过程。
initialize（初始化）：初始化构建状态，比如设置属性值。
generate-sources（生成源代码）：生成包含在编译阶段中的任何源代码。
process-sources（处理源代码）：处理源代码，比如说，过滤任意值。
generate-resources（生成资源文件）：生成将会包含在项目包中的资源文件。
process-resources （处理资源文件）：复制和处理资源到目标目录，为打包阶段最好准备。
compile（编译）：编译项目的源代码。
process-classes（处理类文件）：处理编译生成的文件，比如说对Java class文件做字节码改善优化。
generate-test-sources（生成测试源代码）：生成包含在编译阶段中的任何测试源代码。
process-test-sources（处理测试源代码）：处理测试源代码，比如说，过滤任意值。
generate-test-resources（生成测试资源文件）：为测试创建资源文件。
process-test-resources（处理测试资源文件）：复制和处理测试资源到目标目录。
test-compile（编译测试源码）：编译测试源代码到测试目标目录.
process-test-classes（处理测试类文件）：处理测试源码编译生成的文件。
test（测试）：使用合适的单元测试框架运行测试（Juint是其中之一）。
prepare-package（准备打包）：在实际打包之前，执行任何的必要的操作为打包做准备。
package（打包）：将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件。
pre-integration-test（集成测试前）：在执行集成测试前进行必要的动作。比如说，搭建需要的环境。
integration-test（集成测试）：处理和部署项目到可以运行集成测试环境中。
post-integration-test（集成测试后）：在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。
verify （验证）：运行任意的检查来验证项目包有效且达到质量标准。
install（安装）：安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。
deploy（部署）：将最终的项目包复制到远程仓库中与其他开发者和项目共享。
3.Site 生命周期，一般用来创建新的报告文档、部署站点等。 
pre-site：执行一些需要在生成站点文档之前完成的工作
site：生成项目的站点文档
post-site： 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备
site-deploy：将生成的站点文档部署到特定的服务器上
二.构建配置文件
构建配置文件是一系列的配置项的值，可以用来设置或者覆盖 Maven 构建默认值。使用构建配置文件，可以为不同的环境，定制构建方式。
配置文件在 pom.xml 文件中使用 activeProfiles 或者 profiles 元素指定，并且可以通过各种方式触发。
Maven的构建配置文件可以通过多种方式激活：使用命令控制台输入显式激活；通过 maven 设置；基于环境变量（用户或者系统变量）；文件的存在或者缺失。
三.仓库
Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库。Maven仓库能帮助我们管理构件（主要是JAR），是放置所有JAR文件（WAR，ZIP，POM等）的地方。
Maven 仓库有三种类型：本地（local），中央（central），远程（remote）
四.插件
每个生命周期中包含一系列的阶段(phase)。这些 phase 的实现由 Maven 的插件来完成。
Maven是一个依赖插件执行的框架，Maven插件通常被用来：创建jar文件；创建war文件；编译代码文件；代码单元测试；创建工程文档；创建工程报告
插件通常提供了一个目标的集合，并且可以使用下面的语法执行：
<code>mvn [plugin-name]:[goal-name]</code>
例如，一个 Java 工程可以使用 maven-compiler-plugin 的 compile-goal 编译，使用以下命令：<code>mvn compiler:compile</code>
Maven 提供了下面两种类型的插件：Build plugins(构建时执行，在 pom.xml元素中配置)；Reporting plugins(网站生成过程中执行，在pom.xml元素中配置)
常用插件的列表：
clean：构建之后清理目标文件。删除目标目录。
compiler：编译 Java 源文件。
surefile：运行 JUnit 单元测试。创建测试报告。
jar：从当前工程中构建 JAR 文件。
war：从当前工程中构建 WAR 文件。
javadoc：为工程生成 Javadoc。
antrun：从构建过程的任意一个阶段中运行一个 ant 任务的集合。
五.构建java项目
mvn archetype:generate -DgroupId=<name> -DartifactId=<name> -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
-DgourpId: 组织名，公司网址的反写 + 项目名称
-DartifactId: 项目名-模块名
-DarchetypeArtifactId: 指定 ArchetypeId，maven-archetype-quickstart，创建一个简单的 Java 应用
-DinteractiveMode: 是否使用交互模式
六.快照
快照是一种特殊的版本，指定了某个当前的开发进度的副本。不同于常规的版本，Maven 每次构建都会在远程仓库中检查新的快照。 
mvn clean package -U，-U参数强制 maven 现在最新的快照构建。




